{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOTj2Kz3IXTBeZE9288s9b7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Saurabhkhade10/Internsavy_/blob/main/Loan%20Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "4rELhnpGAdFu"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(42)"
      ],
      "metadata": {
        "id": "wlx3BLDzAga1"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        "    'Loan_ID': [f'LOAN{i}' for i in range(1, 101)],\n",
        "    'Gender': np.random.choice(['Male', 'Female'], size=100),\n",
        "    'Married': np.random.choice(['Yes', 'No'], size=100),\n",
        "    'Dependents': np.random.choice(['0', '1', '2', '3+'], size=100),\n",
        "    'Education': np.random.choice(['Graduate', 'Not Graduate'], size=100),\n",
        "    'ApplicantIncome': np.random.randint(2000, 20000, 100),\n",
        "    'LoanAmount': np.random.randint(5000, 50000, 100),\n",
        "    'Credit_History': np.random.choice([1, 0], size=100),\n",
        "    'Loan_Status': np.random.choice(['Y', 'N'], size=100)\n",
        "}"
      ],
      "metadata": {
        "id": "ydqwoQegAlhr"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.DataFrame(data)\n",
        "df.to_csv('/content/train_u6lujuX_CVtuZ9i.csv', index=False)"
      ],
      "metadata": {
        "id": "qllrhgcCAl5N"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/train_u6lujuX_CVtuZ9i.csv')\n",
        "print(df.head())\n",
        "print(df.info())\n",
        "print(df['Loan_Status'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "k-4XP5wXAoTF",
        "outputId": "9d91830c-723d-4311-8acc-1fde98deca39"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Loan_ID  Gender Married Dependents     Education  ApplicantIncome  \\\n",
            "0   LOAN1    Male     Yes          2      Graduate            14183   \n",
            "1   LOAN2  Female      No         3+      Graduate            14874   \n",
            "2   LOAN3    Male      No          2      Graduate             7539   \n",
            "3   LOAN4    Male      No          0  Not Graduate            11637   \n",
            "4   LOAN5    Male      No         3+  Not Graduate            17586   \n",
            "\n",
            "   LoanAmount  Credit_History Loan_Status  \n",
            "0       33312               1           N  \n",
            "1       27677               0           N  \n",
            "2       36289               1           Y  \n",
            "3       36024               1           N  \n",
            "4       47675               1           N  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100 entries, 0 to 99\n",
            "Data columns (total 9 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   Loan_ID          100 non-null    object\n",
            " 1   Gender           100 non-null    object\n",
            " 2   Married          100 non-null    object\n",
            " 3   Dependents       100 non-null    object\n",
            " 4   Education        100 non-null    object\n",
            " 5   ApplicantIncome  100 non-null    int64 \n",
            " 6   LoanAmount       100 non-null    int64 \n",
            " 7   Credit_History   100 non-null    int64 \n",
            " 8   Loan_Status      100 non-null    object\n",
            "dtypes: int64(3), object(6)\n",
            "memory usage: 7.2+ KB\n",
            "None\n",
            "Y    53\n",
            "N    47\n",
            "Name: Loan_Status, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Loan_Status'] = df['Loan_Status'].map({'Y': 1, 'N': 0})"
      ],
      "metadata": {
        "id": "WBNRomxlAqS0"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = df.drop(['Loan_ID', 'Loan_Status'], axis=1)\n",
        "y = df['Loan_Status']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "OnB1d8noAvbQ"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "model = RandomForestClassifier(random_state=42)"
      ],
      "metadata": {
        "id": "OXPGj-oJAxm_"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "asHkuPkLA1ny"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "classification_rep = classification_report(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'Confusion Matrix:\\n{conf_matrix}')\n",
        "print(f'Classification Report:\\n{classification_rep}')"
      ],
      "metadata": {
        "id": "M_LhuKbrBTma"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = {\n",
        "    'n_estimators': [50, 100, 200],\n",
        "    'max_depth': [None, 10, 20],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4]\n",
        "}\n",
        "\n",
        "grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5)\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "best_params = grid_search.best_params_\n",
        "best_model = grid_search.best_estimator_"
      ],
      "metadata": {
        "id": "RmW733yXBYm7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "t7QKPQ5PBYW6"
      }
    }
  ]
}